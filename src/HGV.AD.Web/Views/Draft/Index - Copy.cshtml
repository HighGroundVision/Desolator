@model IEnumerable<HGV.AD.Web.Models.Attributes.HeroAttributes>
@{
    ViewData["Title"] = "Draft";
}

<h2>Draft <small>Recommendations</small></h2>
<p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque iaculis nulla sed lectus tincidunt, sed accumsan purus vehicula. Phasellus et diam ex. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. 
</p>

<hr />

<section>
    <div class="alert alert-warning visible-xs" role="alert">
        <h5>Warning!</h5> Drafting on mobile is not the best experience. We are exploring other options that work better for mobile devices.
    </div>

    <section data-bind="visible: SelectedHeroes().length != 12" style="display:none;">
        <div class="row" data-bind="foreach: AvailableHeroes">
            <div class="col-xs-4 col-sm-2 col-md-1 col-lg-1">
                <img src="" class="img-rounded img-responsive" data-bind="click: $root.PickHero, css: $root.GetStyling($data), attr: { src: 'http://cdn.dota2.com/apps/dota2/images/heroes/' + identity + '_sb.png' }" />
            </div>
        </div>

        <hr />
        <div class="row" data-bind="foreach: SelectedHeroes">
            <div class="col-xs-4 col-sm-2 col-md-1 col-lg-1">
                <img src="" class="img-responsive img-rounded" data-bind="click: $root.SelectHero, attr: { src: 'http://cdn.dota2.com/apps/dota2/images/heroes/' + identity + '_sb.png' }" />
            </div>
        </div>
        <hr />
    </section>

    <section data-bind="visible: SelectedHeroes().length === 12" style="display:none;">

        <div class="row" data-bind="foreach: FilteredAbilities">
            <div class="col-xs-4 col-sm-2 col-md-1 col-lg-1">
                <img src="" class="img-responsive img-rounded" data-bind="click: $root.SelectAbility, attr: { src: 'http://cdn.dota2.com/apps/dota2/images/abilities/' + identity + '_hp1.png'}"  />
            </div>
        </div>
        <hr />

        <div class="row" data-bind="foreach: FilteredUltimateAbilities">
            <div class="col-xs-4 col-sm-2 col-md-1 col-lg-1">
                <img src="" class="img-responsive img-rounded" data-bind="click: $root.SelectAbility, attr: { src: 'http://cdn.dota2.com/apps/dota2/images/abilities/' + identity + '_hp1.png'}" />
            </div>
        </div>
        <hr />

        <button class="btn btn-primary" data-bind="click: Load">Reset</button>
    </section>
    
</section>

@section scripts
{
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"></script>
    <script type="text/javascript">
        function DraftingViewModel() {
            var self = this;

            // Observables
            self.AvailableHeroes = ko.observableArray();
            self.SelectedHeroes = ko.observableArray();

            self.AvailableAbilities = ko.observableArray();

            self.FilteredAbilities = ko.computed(function () {
                return ko.utils.arrayFilter(self.AvailableAbilities(), function (_) {
                    return _.ultimate === false;
                });
            });

            self.FilteredUltimateAbilities = ko.computed(function () {
                return ko.utils.arrayFilter(self.AvailableAbilities(), function (_) {
                    return _.ultimate === true;
                });
            });

            // Functions
            self.GetStyling = function (item) {
                var entity = ko.utils.arrayFirst(self.SelectedHeroes(), function (_) {
                    return _.id == item.id;
                });

                if (entity) {
                    return "selected-img";
                } else {
                    return "";
                }
            }

            self.PickHero = function (item) {
                var entity = ko.utils.arrayFirst(self.SelectedHeroes(), function (_) {
                    return _.id == item.id;
                });

                if (!entity) {
                    self.SelectedHeroes.push(item);

                    $.get("/Draft/GetHeroesAbilities/" + item.id, function (abilities) {
                        $.each(abilities, function (index, value) {
                            self.AvailableAbilities.push(value);
                        });
                    });
                }
            }

            self.SelectHero = function (item) {
                if (self.SelectedHeroes().length != 12) {
                    self.SelectedHeroes.remove(item);

                    var abilities = ko.utils.arrayFilter(self.AvailableAbilities(), function (_) {
                        return _.heroId === item.id;
                    });

                    self.AvailableAbilities.removeAll(abilities);
                } else {

                }
            }

            self.SelectAbility = function (item, element) {
                if (self.SelectedHeroes().length < 12) {
                    
                }
            }

            self.Load = function () {
                self.AvailableHeroes([]);
                self.SelectedHeroes([]);
                self.AvailableAbilities([]);

                $.get("/Draft/GetHeroes", function (heroes) {
                    self.AvailableHeroes(heroes);
                });
            }

            self.Load();
        }

        $(document).ready(function () {
            
            var vm = new DraftingViewModel();
            ko.applyBindings(vm);

        });
    </script>
}